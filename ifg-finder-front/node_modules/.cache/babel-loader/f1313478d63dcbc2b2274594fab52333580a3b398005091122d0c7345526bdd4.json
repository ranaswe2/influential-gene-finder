{"ast":null,"code":"var _jsxFileName = \"D:\\\\project-spl3\\\\carcinoma-gene-finder-f\\\\src\\\\components\\\\Navbars\\\\DemoNavbar.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Container, InputGroup, InputGroupText, InputGroupAddon, Input } from \"reactstrap\";\nimport routes from \"routes.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DemoNavbar(props) {\n  _s();\n  const location = useLocation();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [dropdownOpen, setDropdownOpen] = React.useState(false);\n  const [color, setColor] = React.useState(\"transparent\");\n  const sidebarToggle = React.useRef();\n  const toggle = () => {\n    if (isOpen) {\n      setColor(\"transparent\");\n    } else {\n      setColor(\"white\");\n    }\n    setIsOpen(!isOpen);\n  };\n  const dropdownToggle = e => {\n    setDropdownOpen(!dropdownOpen);\n  };\n  const getBrand = () => {\n    var name;\n    routes.map((prop, key) => {\n      if (prop.collapse) {\n        prop.views.map((prop, key) => {\n          if (prop.path === location.pathname) {\n            name = prop.name;\n          }\n          return null;\n        });\n      } else {\n        if (prop.redirect) {\n          if (prop.path === location.pathname) {\n            name = prop.name;\n          }\n        } else {\n          if (prop.path === location.pathname) {\n            name = prop.name;\n          }\n        }\n      }\n      return null;\n    });\n    return name;\n  };\n  const openSidebar = () => {\n    document.documentElement.classList.toggle(\"nav-open\");\n    sidebarToggle.current.classList.toggle(\"toggled\");\n  };\n  // function that adds color white/transparent to the navbar on resize (this is for the collapse)\n  const updateColor = () => {\n    if (window.innerWidth < 993 && isOpen) {\n      setColor(\"white\");\n    } else {\n      setColor(\"transparent\");\n    }\n  };\n  React.useEffect(() => {\n    window.addEventListener(\"resize\", updateColor);\n  }, []);\n  React.useEffect(() => {\n    if (window.innerWidth < 993 && document.documentElement.className.indexOf(\"nav-open\") !== -1) {\n      document.documentElement.classList.toggle(\"nav-open\");\n      sidebarToggle.current.classList.toggle(\"toggled\");\n    }\n  }, [location]);\n  return (\n    /*#__PURE__*/\n    // add or remove classes depending if we are on full-screen-maps page or not\n    _jsxDEV(Navbar\n    // color={\n    //   location.pathname.indexOf(\"full-screen-maps\") !== -1 ? \"white\" : color\n    // }\n    // expand=\"lg\"\n    // className={\n    //   location.pathname.indexOf(\"full-screen-maps\") !== -1\n    //     ? \"navbar-absolute fixed-top\"\n    //     : \"navbar-absolute fixed-top \" +\n    //       (color === \"transparent\" ? \"navbar-transparent \" : \"\")\n    // }\n    , {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(DemoNavbar, \"bW78OSO/vTJ9PTt7humJCvZTBDs=\", false, function () {\n  return [useLocation];\n});\n_c = DemoNavbar;\nexport default DemoNavbar;\nvar _c;\n$RefreshReg$(_c, \"DemoNavbar\");","map":{"version":3,"names":["React","Link","useLocation","Collapse","Navbar","NavbarToggler","NavbarBrand","Nav","NavItem","Dropdown","DropdownToggle","DropdownMenu","DropdownItem","Container","InputGroup","InputGroupText","InputGroupAddon","Input","routes","jsxDEV","_jsxDEV","DemoNavbar","props","_s","location","isOpen","setIsOpen","useState","dropdownOpen","setDropdownOpen","color","setColor","sidebarToggle","useRef","toggle","dropdownToggle","e","getBrand","name","map","prop","key","collapse","views","path","pathname","redirect","openSidebar","document","documentElement","classList","current","updateColor","window","innerWidth","useEffect","addEventListener","className","indexOf","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/project-spl3/carcinoma-gene-finder-f/src/components/Navbars/DemoNavbar.js"],"sourcesContent":["\nimport React from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  Dropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Container,\n  InputGroup,\n  InputGroupText,\n  InputGroupAddon,\n  Input,\n} from \"reactstrap\";\n\nimport routes from \"routes.js\";\n\nfunction DemoNavbar(props) {\n  const location = useLocation();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [dropdownOpen, setDropdownOpen] = React.useState(false);\n  const [color, setColor] = React.useState(\"transparent\");\n  const sidebarToggle = React.useRef();\n  const toggle = () => {\n    if (isOpen) {\n      setColor(\"transparent\");\n    } else {\n      setColor(\"white\");\n    }\n    setIsOpen(!isOpen);\n  };\n  const dropdownToggle = (e) => {\n    setDropdownOpen(!dropdownOpen);\n  };\n  const getBrand = () => {\n    var name;\n    routes.map((prop, key) => {\n      if (prop.collapse) {\n        prop.views.map((prop, key) => {\n          if (prop.path === location.pathname) {\n            name = prop.name;\n          }\n          return null;\n        });\n      } else {\n        if (prop.redirect) {\n          if (prop.path === location.pathname) {\n            name = prop.name;\n          }\n        } else {\n          if (prop.path === location.pathname) {\n            name = prop.name;\n          }\n        }\n      }\n      return null;\n    });\n    return name;\n  };\n  const openSidebar = () => {\n    document.documentElement.classList.toggle(\"nav-open\");\n    sidebarToggle.current.classList.toggle(\"toggled\");\n  };\n  // function that adds color white/transparent to the navbar on resize (this is for the collapse)\n  const updateColor = () => {\n    if (window.innerWidth < 993 && isOpen) {\n      setColor(\"white\");\n    } else {\n      setColor(\"transparent\");\n    }\n  };\n  React.useEffect(() => {\n    window.addEventListener(\"resize\", updateColor);\n  }, []);\n  React.useEffect(() => {\n    if (\n      window.innerWidth < 993 &&\n      document.documentElement.className.indexOf(\"nav-open\") !== -1\n    ) {\n      document.documentElement.classList.toggle(\"nav-open\");\n      sidebarToggle.current.classList.toggle(\"toggled\");\n    }\n  }, [location]);\n  return (\n    // add or remove classes depending if we are on full-screen-maps page or not\n    <Navbar\n      // color={\n      //   location.pathname.indexOf(\"full-screen-maps\") !== -1 ? \"white\" : color\n      // }\n      // expand=\"lg\"\n      // className={\n      //   location.pathname.indexOf(\"full-screen-maps\") !== -1\n      //     ? \"navbar-absolute fixed-top\"\n      //     : \"navbar-absolute fixed-top \" +\n      //       (color === \"transparent\" ? \"navbar-transparent \" : \"\")\n      // }\n    >\n      {/* <Container fluid>\n        <div className=\"navbar-wrapper\">\n          <div className=\"navbar-toggle\">\n            <button\n              type=\"button\"\n              ref={sidebarToggle}\n              className=\"navbar-toggler\"\n              onClick={() => openSidebar()}\n            >\n              <span className=\"navbar-toggler-bar bar1\" />\n              <span className=\"navbar-toggler-bar bar2\" />\n              <span className=\"navbar-toggler-bar bar3\" />\n            </button>\n          </div>\n          <NavbarBrand href=\"/\">{getBrand()}</NavbarBrand>\n        </div>\n        <NavbarToggler onClick={toggle}>\n          <span className=\"navbar-toggler-bar navbar-kebab\" />\n          <span className=\"navbar-toggler-bar navbar-kebab\" />\n          <span className=\"navbar-toggler-bar navbar-kebab\" />\n        </NavbarToggler>\n        <Collapse isOpen={isOpen} navbar className=\"justify-content-end\">\n          <form>\n            <InputGroup className=\"no-border\">\n              <Input placeholder=\"Search...\" />\n              <InputGroupAddon addonType=\"append\">\n                <InputGroupText>\n                  <i className=\"now-ui-icons ui-1_zoom-bold\" />\n                </InputGroupText>\n              </InputGroupAddon>\n            </InputGroup>\n          </form>\n          <Nav navbar>\n            <NavItem>\n              <Link to=\"#pablo\" className=\"nav-link\">\n                <i className=\"now-ui-icons media-2_sound-wave\" />\n                <p>\n                  <span className=\"d-lg-none d-md-block\">Stats</span>\n                </p>\n              </Link>\n            </NavItem>\n            <Dropdown\n              nav\n              isOpen={dropdownOpen}\n              toggle={(e) => dropdownToggle(e)}\n            >\n              <DropdownToggle caret nav>\n                <i className=\"now-ui-icons location_world\" />\n                <p>\n                  <span className=\"d-lg-none d-md-block\">Some Actions</span>\n                </p>\n              </DropdownToggle>\n              <DropdownMenu right>\n                <DropdownItem tag=\"a\">Action</DropdownItem>\n                <DropdownItem tag=\"a\">Another Action</DropdownItem>\n                <DropdownItem tag=\"a\">Something else here</DropdownItem>\n              </DropdownMenu>\n            </Dropdown>\n            <NavItem>\n              <Link to=\"#pablo\" className=\"nav-link\">\n                <i className=\"now-ui-icons users_single-02\" />\n                <p>\n                  <span className=\"d-lg-none d-md-block\">Account</span>\n                </p>\n              </Link>\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Container> */}\n    </Navbar>\n  );\n}\n\nexport default DemoNavbar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}