{"ast":null,"code":"var _jsxFileName = \"D:\\\\project-spl3\\\\carcinoma-gene-finder-f\\\\src\\\\views\\\\TableList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport * as XLSX from 'xlsx'; // Import the xlsx library for parsing Excel files\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RegularTables() {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    // Function to parse Excel file\n    const parseExcel = file => {\n      const reader = new FileReader();\n      const rABS = !!reader.readAsBinaryString;\n      reader.onload = e => {\n        const data = e.target.result;\n        const workbook = XLSX.read(data, {\n          type: rABS ? 'binary' : 'array'\n        });\n        const sheetName = workbook.SheetNames[0]; // Assuming there is only one sheet\n        const worksheet = workbook.Sheets[sheetName];\n        const parsedData = XLSX.utils.sheet_to_json(worksheet, {\n          header: 1\n        });\n        setData(parsedData);\n      };\n      if (file) {\n        if (rABS) {\n          reader.readAsBinaryString(file);\n        } else {\n          reader.readAsArrayBuffer(file);\n        }\n      }\n    };\n\n    // Handle file input change\n    const handleFileChange = e => {\n      const file = e.target.files[0];\n      parseExcel(file);\n    };\n\n    // Clean up\n    return () => {\n      // Clean up if needed\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: data.length > 0 && data[0].map((cell, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: cell\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 44\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: data.slice(1).map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: cell\n          }, cellIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(RegularTables, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = RegularTables;\nexport default RegularTables;\nvar _c;\n$RefreshReg$(_c, \"RegularTables\");","map":{"version":3,"names":["React","useState","useEffect","XLSX","jsxDEV","_jsxDEV","RegularTables","_s","data","setData","parseExcel","file","reader","FileReader","rABS","readAsBinaryString","onload","e","target","result","workbook","read","type","sheetName","SheetNames","worksheet","Sheets","parsedData","utils","sheet_to_json","header","readAsArrayBuffer","handleFileChange","files","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","length","map","cell","index","slice","row","rowIndex","cellIndex","_c","$RefreshReg$"],"sources":["D:/project-spl3/carcinoma-gene-finder-f/src/views/TableList.js"],"sourcesContent":["\nimport React, { useState, useEffect } from 'react';\nimport * as XLSX from 'xlsx'; // Import the xlsx library for parsing Excel files\n\nfunction RegularTables() {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    // Function to parse Excel file\n    const parseExcel = (file) => {\n      const reader = new FileReader();\n      const rABS = !!reader.readAsBinaryString;\n\n      reader.onload = (e) => {\n        const data = e.target.result;\n        const workbook = XLSX.read(data, { type: rABS ? 'binary' : 'array' });\n        const sheetName = workbook.SheetNames[0]; // Assuming there is only one sheet\n        const worksheet = workbook.Sheets[sheetName];\n        const parsedData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n        setData(parsedData);\n      };\n\n      if (file) {\n        if (rABS) {\n          reader.readAsBinaryString(file);\n        } else {\n          reader.readAsArrayBuffer(file);\n        }\n      }\n    };\n\n    // Handle file input change\n    const handleFileChange = (e) => {\n      const file = e.target.files[0];\n      parseExcel(file);\n    };\n\n    // Clean up\n    return () => {\n      // Clean up if needed\n    };\n  }, []);\n\n  return (\n    <div>\n      <input type=\"file\" onChange={handleFileChange} />\n      <table>\n        <thead>\n          <tr>\n            {data.length > 0 &&\n              data[0].map((cell, index) => <th key={index}>{cell}</th>)}\n          </tr>\n        </thead>\n        <tbody>\n          {data.slice(1).map((row, rowIndex) => (\n            <tr key={rowIndex}>\n              {row.map((cell, cellIndex) => (\n                <td key={cellIndex}>{cell}</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default RegularTables;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}