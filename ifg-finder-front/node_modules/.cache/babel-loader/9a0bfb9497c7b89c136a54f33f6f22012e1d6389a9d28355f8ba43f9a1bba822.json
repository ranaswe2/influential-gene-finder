{"ast":null,"code":"var _jsxFileName = \"D:\\\\project-spl3\\\\ifg-finder-front\\\\src\\\\variables\\\\general.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DrugCandidatesTable = ({\n  ifgId\n}) => {\n  _s();\n  const [drugCandidates, setDrugCandidates] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const fetchDrugCandidates = async () => {\n    setIsLoading(true);\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        alert(\"You are not logged in\");\n        return;\n      }\n      const response = await fetch(`http://127.0.0.1:8000/api/drug/find/`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          influentialgene_id: ifgId\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        const csvPath = data.drug_candidate.dsigdb_path;\n        fetchCsvData(csvPath); // Fetch the CSV data from the path\n      } else {\n        alert(\"Error fetching drug candidates\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching drug candidates:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const fetchCsvData = async csvPath => {\n    try {\n      const response = await fetch(`http://127.0.0.1:8000${csvPath}`);\n      const text = await response.text();\n      const rows = text.split(\"\\n\").map(row => row.split(\",\"));\n      setDrugCandidates(rows);\n    } catch (error) {\n      console.error(\"Error fetching CSV data:\", error);\n    }\n  };\n  useEffect(() => {\n    if (ifgId) {\n      fetchDrugCandidates();\n    }\n  }, [ifgId]);\n  return {\n    drugCandidates,\n    isLoading\n  };\n};\n_s(DrugCandidatesTable, \"x6erR4hR7uMaXMWgK0FgfrWnTKE=\");\n_c = DrugCandidatesTable;\nconst tasks = [{\n  checked: true,\n  text: 'G'\n}, {\n  checked: false,\n  text: \"V\"\n}, {\n  checked: true,\n  text: \"C\"\n}];\n\n// ##############################\n// // // table head data and table body data for Tables view\n// #############################\n\nconst thead = [\"Drug Name\", \"P-value\", \"Targeted Influential Genes\"];\nconst DrugTable = ({\n  drugCandidates\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"table\",\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: thead.map((heading, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n          children: heading\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: drugCandidates && drugCandidates.length > 0 ? drugCandidates.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: row[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: row[1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: row[2]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: /*#__PURE__*/_jsxDEV(\"td\", {\n          colSpan: \"3\",\n          children: \"No data available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_c2 = DrugTable;\nconst tbody = [];\n// tasks list for Tasks card in Dashboard view\n// data for <thead> of table in TableList view\n// data for <tbody> of table in TableList view\nexport { tasks, thead, tbody, DrugTable };\nvar _c, _c2;\n$RefreshReg$(_c, \"DrugCandidatesTable\");\n$RefreshReg$(_c2, \"DrugTable\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","DrugCandidatesTable","ifgId","_s","drugCandidates","setDrugCandidates","isLoading","setIsLoading","fetchDrugCandidates","token","localStorage","getItem","alert","response","fetch","method","headers","Authorization","body","JSON","stringify","influentialgene_id","ok","data","json","csvPath","drug_candidate","dsigdb_path","fetchCsvData","error","console","text","rows","split","map","row","_c","tasks","checked","thead","DrugTable","className","children","heading","index","fileName","_jsxFileName","lineNumber","columnNumber","length","colSpan","_c2","tbody","$RefreshReg$"],"sources":["D:/project-spl3/ifg-finder-front/src/variables/general.js"],"sourcesContent":["\nimport { useState, useEffect } from 'react';\n\nconst DrugCandidatesTable = ({ ifgId }) => {\n  const [drugCandidates, setDrugCandidates] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const fetchDrugCandidates = async () => {\n    setIsLoading(true);\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        alert(\"You are not logged in\");\n        return;\n      }\n\n      const response = await fetch(`http://127.0.0.1:8000/api/drug/find/`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({ influentialgene_id: ifgId }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        const csvPath = data.drug_candidate.dsigdb_path;\n        fetchCsvData(csvPath); // Fetch the CSV data from the path\n      } else {\n        alert(\"Error fetching drug candidates\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching drug candidates:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const fetchCsvData = async (csvPath) => {\n    try {\n      const response = await fetch(`http://127.0.0.1:8000${csvPath}`);\n      const text = await response.text();\n      const rows = text.split(\"\\n\").map((row) => row.split(\",\"));\n      setDrugCandidates(rows);\n    } catch (error) {\n      console.error(\"Error fetching CSV data:\", error);\n    }\n  };\n\n  useEffect(() => {\n    if (ifgId) {\n      fetchDrugCandidates();\n    }\n  }, [ifgId]);\n\n  return { drugCandidates, isLoading };\n};\n\n\nconst tasks = [\n  {\n    checked: true,\n    text: 'G',\n  },\n  {\n    checked: false,\n    text: \"V\",\n  },\n  {\n    checked: true,\n    text: \"C\",\n  },\n];\n\n// ##############################\n// // // table head data and table body data for Tables view\n// #############################\n\nconst thead = [\"Drug Name\", \"P-value\", \"Targeted Influential Genes\"];\n\nconst DrugTable = ({ drugCandidates }) => {\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          {thead.map((heading, index) => (\n            <th key={index}>{heading}</th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {drugCandidates && drugCandidates.length > 0 ? (\n          drugCandidates.map((row, index) => (\n            <tr key={index}>\n              <td>{row[0]}</td>\n              <td>{row[1]}</td>\n              <td>{row[2]}</td>\n            </tr>\n          ))\n        ) : (\n          <tr>\n            <td colSpan=\"3\">No data available</td>\n          </tr>\n        )}\n      </tbody>\n    </table>\n  );\n};\n\nconst tbody = [];\n// tasks list for Tasks card in Dashboard view\n// data for <thead> of table in TableList view\n// data for <tbody> of table in TableList view\nexport { tasks, thead, tbody, DrugTable };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}