{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst DrugCandidatesTable = ({\n  ifgId\n}) => {\n  _s();\n  const [drugCandidates, setDrugCandidates] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const fetchDrugCandidates = async () => {\n    setIsLoading(true);\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        alert(\"You are not logged in\");\n        return;\n      }\n      const response = await fetch(`http://127.0.0.1:8000/api/drug/find/`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          influentialgene_id: ifgId\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        const csvPath = data.drug_candidate.dsigdb_path;\n        fetchCsvData(csvPath); // Fetch the CSV data from the path\n      } else {\n        alert(\"Error fetching drug candidates\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching drug candidates:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const fetchCsvData = async csvPath => {\n    try {\n      const response = await fetch(`http://127.0.0.1:8000${csvPath}`);\n      const text = await response.text();\n      const rows = text.split(\"\\n\").map(row => row.split(\",\"));\n      setDrugCandidates(rows);\n    } catch (error) {\n      console.error(\"Error fetching CSV data:\", error);\n    }\n  };\n  useEffect(() => {\n    if (ifgId) {\n      fetchDrugCandidates();\n    }\n  }, [ifgId]);\n  return {\n    drugCandidates,\n    isLoading\n  };\n};\n_s(DrugCandidatesTable, \"x6erR4hR7uMaXMWgK0FgfrWnTKE=\");\n_c = DrugCandidatesTable;\nconst tasks = [{\n  checked: true,\n  text: 'G'\n}, {\n  checked: false,\n  text: \"V\"\n}, {\n  checked: true,\n  text: \"C\"\n}];\n\n// ##############################\n// // // table head data and table body data for Tables view\n// #############################\n\nconst thead = [\"Drug Name\", \"P-value\", \"Targeted Influential Genes\"];\nconst tbody = [];\n\n// tasks list for Tasks card in Dashboard view\n// data for <thead> of table in TableList view\n// data for <tbody> of table in TableList view\nexport { tasks, thead, tbody };\nvar _c;\n$RefreshReg$(_c, \"DrugCandidatesTable\");","map":{"version":3,"names":["useState","useEffect","DrugCandidatesTable","ifgId","_s","drugCandidates","setDrugCandidates","isLoading","setIsLoading","fetchDrugCandidates","token","localStorage","getItem","alert","response","fetch","method","headers","Authorization","body","JSON","stringify","influentialgene_id","ok","data","json","csvPath","drug_candidate","dsigdb_path","fetchCsvData","error","console","text","rows","split","map","row","_c","tasks","checked","thead","tbody","$RefreshReg$"],"sources":["D:/project-spl3/ifg-finder-front/src/variables/general.js"],"sourcesContent":["\nimport { useState, useEffect } from 'react';\n\nconst DrugCandidatesTable = ({ ifgId }) => {\n  const [drugCandidates, setDrugCandidates] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const fetchDrugCandidates = async () => {\n    setIsLoading(true);\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        alert(\"You are not logged in\");\n        return;\n      }\n\n      const response = await fetch(`http://127.0.0.1:8000/api/drug/find/`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({ influentialgene_id: ifgId }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        const csvPath = data.drug_candidate.dsigdb_path;\n        fetchCsvData(csvPath); // Fetch the CSV data from the path\n      } else {\n        alert(\"Error fetching drug candidates\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching drug candidates:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const fetchCsvData = async (csvPath) => {\n    try {\n      const response = await fetch(`http://127.0.0.1:8000${csvPath}`);\n      const text = await response.text();\n      const rows = text.split(\"\\n\").map((row) => row.split(\",\"));\n      setDrugCandidates(rows);\n    } catch (error) {\n      console.error(\"Error fetching CSV data:\", error);\n    }\n  };\n\n  useEffect(() => {\n    if (ifgId) {\n      fetchDrugCandidates();\n    }\n  }, [ifgId]);\n\n  return { drugCandidates, isLoading };\n};\n\n\nconst tasks = [\n  {\n    checked: true,\n    text: 'G',\n  },\n  {\n    checked: false,\n    text: \"V\",\n  },\n  {\n    checked: true,\n    text: \"C\",\n  },\n];\n\n// ##############################\n// // // table head data and table body data for Tables view\n// #############################\n\nconst thead = [\"Drug Name\", \"P-value\", \"Targeted Influential Genes\"];\nconst tbody = [\n];\n\n// tasks list for Tasks card in Dashboard view\n// data for <thead> of table in TableList view\n// data for <tbody> of table in TableList view\nexport { tasks, thead, tbody };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}